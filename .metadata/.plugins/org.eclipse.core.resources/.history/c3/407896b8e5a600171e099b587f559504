package o1.time

class Interval(private val start: Moment, private val end: Moment) {
   
  def length:Int = this.start.distance(this.end)
  
  def isLaterThan(moment: Moment):Boolean = this.start.toString.toInt > moment.toString.toInt
  
  def isLaterThan(another: Interval):Boolean = this.toString > another.toString
  
  def contains(moment: Moment):Boolean = {
    (moment.isLaterThan(this.start) || (moment.toString == this.start.toString)) && 
    (this.end.isLaterThan(moment) || (moment.toString == this.end.toString))
  }
  

  def contains(another: Interval):Boolean = {
    //println(another+"contains this.start("+this.start+"): "+another.contains(this.start))
    //!another.contains(this.start) && !another.contains(this.end)
    another.isLaterThan(this.start) && !another.isLaterThan(new Moment(this.start.toString.toInt+another.length))
  }
  
  def overlaps(another: Interval) = {
    
    this.contains(another) ||
    another.contains(this) ||
    this.start.isIn(another) ||
    this.end.isIn(another)
    // */
    /*
    if (this.contains(another)) println("this contains another")
    if (another.contains(this)) println("another contains this")
    if (this.start.isIn(another)) println(this.start + "is in another")
    if (this.end.isIn(another)) println(this.end + "is in another")
    * 
    */
  }
  
  
  override def toString = {
    var result = ""
    if (this.length == 0) {
      result = this.start.toString
    } else {
      val divider = if (this.length > 50) "..." else  "-"*this.length
      result = start.toString+divider+end.toString
    }
    result
  }
  
  
}