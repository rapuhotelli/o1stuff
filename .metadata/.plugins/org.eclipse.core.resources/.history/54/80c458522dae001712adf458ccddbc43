package o1.auctionhouse

import scala.math._

class EnglishAuction(val description: String, val startingPrice: Int, duration: Int) {

  // Keep these variables; they will be useful for implementing the methods.
  private var highestBid = new Bid(None, startingPrice)       // most-wanted holder
  private var secondHighestBid = new Bid(None, startingPrice) // most-wanted holder
  private var remainingDays = this.duration 
  

  // However, the method implementations given below leave a lot to be desired. 

  
  def daysLeft: Int = this.remainingDays // TODO: replace with a working method implementation
  
  
  def advanceOneDay() = {
    if (this.daysLeft > 0) {
      this.remainingDays -= 1;
    } else if (this.daysLeft == 0) {
      if (highestBid.isInitialBid) {
        this.expire
      }
    }
    
    
    // TODO: implement this method
  }

  
  def isOpen: Boolean = {
    this.daysLeft > 0 
  }

  
  def isExpired: Boolean = {
    ((this.daysLeft == 0) && (highestBid.isInitialBid)) 
  }

  
  def buyer: Option[String] = ??? // TODO: replace with a working method implementation 

  
  def price: Int = ??? // TODO: replace with a working method implementation
  
  
  def requiredBid: Int = {
    if (this.highestBid.isInitialBid) this.startingPrice
    else (this.highestBid.limit+1)
    // TODO: replace with a working method implementation
  }
  
  
  def bid(bidder: String, amount: Int): Boolean = {
    if (amount > this.highestBid.limit) {
      this.highestBid = new Bid(Some(bidder), amount)
    } else if (amount > this.secondHighestBid.limit) {
      this.secondHighestBid = new Bid(Some(bidder), amount)
    }
    ??? // TODO: replace with a working method implementation
  }
  
  
  override def toString = this.description
  
  
}
