package o1.time

class Interval(val start: Moment, val end: Moment) {
    
  def length:Int = this.start.distance(this.end)
  
  def isLaterThan(moment: Moment):Boolean = this.start.toString.toInt > moment.toString.toInt
  
  def isLaterThan(another: Interval):Boolean = this.toString > another.toString
  
  def contains(moment: Moment):Boolean = {
    (moment.isLaterThan(this.start) || (moment.toString == this.start.toString)) && 
    (this.end.isLaterThan(moment) || (moment.toString == this.end.toString))
  }
  
  // lol
  def contains(another: Interval):Boolean = {
    another.isLaterThan(this.start) && !another.isLaterThan(new Moment(this.start.toString.toInt+another.length))
  }
  
  def overlaps(another: Interval) = {
    this.contains(another) ||
    another.contains(this) ||
    this.start.isIn(another) ||
    this.end.isIn(another)
  }
  
  def union(another: Interval) = {
    val uStart = if (this.start.toString < another.end.toString) {
      
    }
  }
  
  
  override def toString = {
    var result = ""
    if (this.length == 0) {
      result = this.start.toString
    } else {
      val divider = if (this.length > 50) "..." else  "-"*this.length
      result = start.toString+divider+end.toString
    }
    result
  }
  
  
}